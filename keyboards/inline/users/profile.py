from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import BadRequest

from keyboards.inline.users import ConnectWithUsMP
from keyboards.inline.users import LearnMorePage
from keyboards.inline.users import WebinarPage
from keyboards.inline.users import profile_cb
from keyboards.inline.users.companiesPage import CompaniesPage
from keyboards.inline.users.mainPage import MainPage
from loader import bot
from states.users import RegistrationUser


class Profile:
    @staticmethod
    async def process_profile(callback: CallbackQuery = None, message: Message = None,
                              state: FSMContext = None) -> None:

        if callback:
            if callback.data.startswith('profile'):
                data: dict = profile_cb.parse(callback_data=callback.data)

                if data.get("target") == "MainPage":
                    Greetings_text: str = "ü§ñ–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ Magnetto, –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ " \
                                          "–≤–µ–±–∏–Ω–∞—Ä –∏ –ø–æ–∑–Ω–∞–∫–æ–º–ª—é —Å –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! "
                    await callback.message.edit_text(text=Greetings_text,
                                                     reply_markup=await MainPage.mainPage_ikb())

                # ###########4 –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é #########
                elif data.get("target") == "WebinarMainPage":
                    await callback.message.edit_text(text=await WebinarPage.textWebinarPage(),
                                                     reply_markup=await WebinarPage.WebinarPageIKB())

                elif data.get("target") == "CompaniesMainPage":
                    await callback.message.edit_text(text=await CompaniesPage.textCompanies(),
                                                     reply_markup=await CompaniesPage.companiesPage_ikb())

                elif data.get("target") == "LearnMoreMainPage":
                    await callback.message.edit_text(text=await LearnMorePage.LearnMorePage_text(),
                                                     reply_markup= await LearnMorePage.LearnMorePage_IKB())

                elif data.get("target") == "ConnectWithUsMP":
                    await callback.message.edit_text(text=await ConnectWithUsMP.ConnectWithUsMP_text(),
                                                     reply_markup=await ConnectWithUsMP.ConnectWithUsMP_IKB())
                ################################################

                elif data.get("target") == "RegistrationUser":
                    await callback.message.edit_text(text=await WebinarPage.registration_user_text())
                    await RegistrationUser.LName.set()

                elif data.get("target") == "CatalogWebinars":
                    await callback.message.edit_text(text=await CompaniesPage.CatalogWebinars_text(),
                                                     reply_markup=await CompaniesPage.CatalogWebinars_IKB())

                elif data.get('target') == "OnlineApplication":
                    await CompaniesPage.OnlineApplication_text_LinkBot(callback=callback)
                    await RegistrationUser.LinkBOT.set()

                elif data.get('target') == "SkipCompaniesPage":
                    number = int(data.get('id'))
                    if number == 1:
                        await CompaniesPage.OnlineApplication_text_Budget(callback=callback)
                        await RegistrationUser.Budget.set()
                    elif number == 2:
                        await callback.message.delete()
                        await callback.message.answer(text="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: (—à–∞–≥ 3 –∏–∑ 3)",
                                                      reply_markup=await CompaniesPage.phone_kb()
                                                      )
                        await RegistrationUser.Phone.set()

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                if await state.get_state() == "RegistrationUser:LName":
                    await state.update_data(name=message.text)
                    await message.answer(text=await WebinarPage.email_text())
                    await RegistrationUser.Email.set()

                elif await state.get_state() == "RegistrationUser:Email":
                    email = await WebinarPage.validate_email(message.text)
                    if email is not None:
                        await message.answer(text="–°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä. –ú—ã "
                                                  "–æ—Ç–ø—Ä–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –Ω–∞ –≤–∞—à email",
                                             reply_markup=await WebinarPage.back_mainMenu())
                    else:
                        await message.answer(text="–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π email")

                    await state.update_data(email=message.text)

                elif await state.get_state() == "RegistrationUser:LinkBOT":
                    await state.update_data(linkbot=message.text)
                    await CompaniesPage.OnlineApplication_text_Budget(message=message)
                    await RegistrationUser.Budget.set()

                elif await state.get_state() == "RegistrationUser:Budget":
                    await state.update_data(budget=message.text)

                    await message.answer(text="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: (—à–∞–≥ 3 –∏–∑ 3)",
                                         reply_markup=await CompaniesPage.phone_kb()
                                         )
                    await RegistrationUser.Phone.set()

                elif await state.get_state() == "RegistrationUser:Phone":
                    if message.content_type == "contact":
                        await state.update_data(phone=message.contact.phone_number)
                        await CompaniesPage.OnlineApplication_text_Finish(message=message)
                        await state.finish()
                    elif message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                        await CompaniesPage.OnlineApplication_text_Finish(message=message)
                        await state.finish()
                    else:
                        await state.update_data(phone=message.text)
                        await state.finish()