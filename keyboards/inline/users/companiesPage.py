from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, Message, \
    CallbackQuery

from keyboards.inline.users import profile_cb


class CompaniesPage:
    @staticmethod
    async def textCompanies() -> str:
        text = "üß≤ Magnetto.pro ‚Äî –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞. \n\n" \
               "–ß—Ç–æ –º—ã —É–º–µ–µ–º:\n\n" \
               "üìå –†–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ –ª—é–±—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö: " \
               "Telegram Ads, –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç, Google Ads, VK, email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –¥—Ä—É–≥–æ–µ;\n\n" \
               "..."
        return text

    @staticmethod
    async def back_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=profile_cb.new("MainPage", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def skip_ikb(number: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=f"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                                         callback_data=profile_cb.new("SkipCompaniesPage", number, 0))
                ]
            ]
        )

    @staticmethod
    async def phone_kb() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            resize_keyboard=True,
            one_time_keyboard=True,
            selective=True,
            keyboard=[
                [
                    KeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
                                   request_contact=True),
                    KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=profile_cb.new("PhoneNumber", 3, 0))
                ]
            ]
        )

    @staticmethod
    async def companiesPage_ikb() -> InlineKeyboardMarkup:
        """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

            :param:
            :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=f"üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏",
                                         callback_data=profile_cb.new("ConnectWithUsMP", 0, 0))
                ],
                [
                    InlineKeyboardButton(text=f"üîù –û–Ω–ª–∞–π–Ω –∑–∞—è–≤–∫–∞",
                                         callback_data=profile_cb.new("OnlineApplication", 0, 0))
                ],
                [
                    InlineKeyboardButton(text=f"üöÄ –£–∑–Ω–∞—Ç—å –æ –≤–µ–±–∏–Ω–∞—Ä–µ",
                                         callback_data=profile_cb.new("WebinarMainPage", 0, 0))
                ],
                [
                    InlineKeyboardButton(text=f"üóÇ –ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—à–∏—Ö –≤–µ–±–∏–Ω–∞—Ä–æ–≤",
                                         callback_data=profile_cb.new("CatalogWebinars", 0, 0))
                ],
                [
                    InlineKeyboardButton(text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=profile_cb.new("MainPage", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def CatalogWebinars_IKB() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=f"üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏",
                                         callback_data=profile_cb.new("ConnectWithUsMP", 0, 0))
                ],
                [
                    InlineKeyboardButton(text=f"üöÄ –£–∑–Ω–∞—Ç—å –æ –≤–µ–±–∏–Ω–∞—Ä–µ",
                                         callback_data=profile_cb.new("WebinarMainPage", 0, 0))
                ],
                [
                    InlineKeyboardButton(text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=profile_cb.new("MainPage", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def CatalogWebinars_text() -> str:
        text: str = "–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—à–∏—Ö –≤–µ–±–∏–Ω–∞—Ä–æ–≤:\n\n" \
                    "‚úÖ –í–µ–±–∏–Ω–∞—Ä: –ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ä—ã–Ω–æ–∫ Telegram Ads —Å —Å–µ–Ω—Ç—è–±—Ä—è 2022.\n\n" \
                    "–í —á—ë–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Telegram Ads? –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –Ω–∞—á–∞—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å? –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ " \
                    "—Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∏ –∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è 2022 –≤–∞–∂–Ω—ã –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã? " \
                    "–û–±–æ –≤—Å—ë–º —ç—Ç–æ–º ‚Äî –≤ –∑–∞–ø–∏—Å–∏ –Ω–∞—à–µ–≥–æ –≤–µ–±–∏–Ω–∞—Ä–∞\n\n" \
                    "..."
        return text

    @staticmethod
    async def OnlineApplication_text_LinkBot(callback: CallbackQuery):
        text = "üëâ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞)\n\n" \
               "1‚É£ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª/–±–æ—Ç: (—à–∞–≥ 1 –∏–∑ 3)"
        await callback.message.edit_text(text=text,
                                         reply_markup=await CompaniesPage.skip_ikb(number=1)
                                         )

    @staticmethod
    async def OnlineApplication_text_Budget(callback: CallbackQuery = None, message: Message = None):
        text = "–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é.\n" \
               "‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç: 3000 –µ–≤—Ä–æ"
        if callback:
            await callback.message.edit_text(text=text,
                                             reply_markup=await CompaniesPage.skip_ikb(number=2)
                                             )
        else:
            await message.answer(text=text, reply_markup=await CompaniesPage.skip_ikb(number=2)
                                 )

    @staticmethod
    async def OnlineApplication_text_Phone(message: Message):
        await message.answer(text="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: (—à–∞–≥ 3 –∏–∑ 3)",
                             reply_markup=await CompaniesPage.phone_kb()
                             )

    @staticmethod
    async def OnlineApplication_text_Finish(message: Message):
        text = "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤."
        await message.answer(text=text,
                             reply_markup=await CompaniesPage.back_ikb()
                             )
